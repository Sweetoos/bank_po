@startuml

' Interfejsy
interface Transactable {
    +deposit(amount: double)
    +withdraw(amount: double): boolean
    +transfer(targetAccount: Account, amount: double): boolean
}

' Główna Klasa Zarządzająca
class Bank {
    -clients: Map<String, Client>
    +addClient(client: Client)
    +getClient(id: String): Client
    +generateDailyReport(): String
    +saveAllDataToDB()
    +loadDataFromFiles()
}

' Klasa Klienta
class Client {
    -clientId: String
    -name: String
    -address: String
    -accounts: List<Account>
    +addAccount(account: Account)
    +getAccount(accountId: String): Account
}

' Klasa Abstrakcyjna
abstract class Account {
    #accountId: String
    #balance: double
    #transactionHistory: List<Transaction>
    +getBalance(): double
    +recordTransaction(type: String, amount: double)
    +{abstract} withdraw(amount: double): boolean
}

' Podklasy Kont
class CheckingAccount {
    -overdraftLimit: double
    +withdraw(amount: double): boolean
}

class SavingsAccount {
    -interestRate: double
    +addInterest()
    ' Polimorfizm (inna implementacja niż w CheckingAccount)
    +withdraw(amount: double): boolean
}

' Klasa Transakcji
class Transaction {
    -transactionId: String
    -type: String
    -amount: double
    -date: LocalDate
    -sourceAccountId: String
    -targetAccountId: String
}

' Wyjątki
class BankException
class InsufficientFundsException
class InvalidAmountException
class ClientNotFoundException

' Relacje
Transactable <|.. Account
Account <|-- CheckingAccount
Account <|-- SavingsAccount

BankException <|-- InsufficientFundsException
BankException <|-- InvalidAmountException
BankException <|-- ClientNotFoundException

Bank "1" -- "*" Client : zarządza >
Client "1" -- "*" Account : posiada >
Account "1" -- "*" Transaction : przechowuje >

@enduml